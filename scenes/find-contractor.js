const Scene = require("telegraf/scenes/base");
const messages = require("../messages");
const { getID, userList, whatMarkup } = require("../components/scene-functions");
const userModel = require("../models/User");
const courtModel = require("../models/Court");
require("dotenv").config();
const { switcher } = require("../components/switcher");
const { findContractorHandler } = require("../components/find-contractor-handler");
const logger = require("../logger");

// —Å—Ü–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –±–æ—Ç–∞

exports.GenFind–°ontractorScene = function () {
	const find–°ontractor = new Scene("find–°ontractor");
	let dbid; // —Å—é–¥–∞ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—É–¥–∞/—Ä–µ–≥–∏–æ–Ω–∞
	let foundedCounter; // —Å—é–¥–∞ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
	find–°ontractor.enter(async (ctx) => {
		ctx.scene.state.sceneName = "find–°ontractor";
		ctx.scene.state.contractorsPage = 1; // –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
		let mainID = getID(ctx.message, ctx.callbackQuery);
		ctx.reply(
			`
üí°
–≠—Ç–æ –ø–æ–∏—Å–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å—É–¥–µ–±–Ω—ã–º –¥–µ–ª–æ–º.
–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ —Å—É–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—É–¥—ã.
–ö–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Å—É–¥–æ–º —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –≥–æ—Ç–æ–≤–æ–≥–æ —Ç—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å.`,
			await whatMarkup(mainID)
		);
	});
	find–°ontractor.on("text", async (ctx) => {
		switcher(ctx, findContractorHandler);
	});
	find–°ontractor.action(/^dbid_.+/, async (ctx) => {
		ctx.answerCbQuery();
		dbid = ctx.callbackQuery.data.slice(5);
		try {
			const chosenCourt = await courtModel.findOne({ _id: dbid });
			foundedCounter = await userModel.aggregate([
				{
					$match: {
						contractorStatus: true,
						region: chosenCourt.COURTNUMBER,
						$and: [
							{ telegramId: { $ne: process.env.ADMIN_ID } },
							{ telegramId: { $ne: ctx.update.callback_query.message.chat.id } },
						],
					},
				},
				{
					$count: "telegramId",
				},
			]);
			const dbRequestResults = await userModel.aggregate([
				{
					$match: {
						contractorStatus: true,
						region: chosenCourt.COURTNUMBER,
						$and: [
							{ telegramId: { $ne: process.env.ADMIN_ID } },
							{ telegramId: { $ne: ctx.update.callback_query.message.chat.id } },
						],
					},
				},
				{ $sort: { "rating.totalRating": -1 } },
			]);
			if (dbRequestResults.length > 0) {
				await ctx.reply(`
üîé –í —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –µ—Å—Ç—å ${foundedCounter[0].telegramId} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π. üîç
–í–æ—Ç –æ–Ω–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É.
`);
				const moreContractorsButton = () => {
					if (dbRequestResults.length > 3) {
						return {
							reply_markup: {
								inline_keyboard: [[{ text: "‚¨áÔ∏è –ï—â–µ ‚¨áÔ∏è", callback_data: "more_contractors" }]],
							},
							parse_mode: "HTML",
						};
					}
				};
				async function orderedMessages(array) {
					const newArray = array.slice(0, 3);
					for (const element of newArray) {
						await userList(element, ctx);
					}
					ctx.reply(
						`
–ü–æ–∫–∞–∑–∞–Ω–æ ${foundedCounter[0].telegramId < 3 ? foundedCounter[0].telegramId : 3} –∏–∑ ${
							foundedCounter[0].telegramId
						} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ.
`,
						moreContractorsButton()
					);
				}
				orderedMessages(dbRequestResults);
			} else {
				ctx.reply(`
‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ö†Ô∏è

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –±–æ—Ç–µ —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö –∫–æ–ª–ª–µ–≥ @oznakomim_bot.
`);
			}
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	});
	find–°ontractor.action(/^user_.+/, async (ctx) => {
		ctx.answerCbQuery();
		const DbUserId = ctx.callbackQuery.data.slice(5);
		try {
			const chosenUser = await userModel.findOne({ _id: DbUserId });
			await userModel.updateOne(
				{ telegramId: chosenUser.telegramId },
				{ $inc: { "rating.contractorRating": 1, "rating.totalRating": 1 } }
			);
			const currentCustomer = await userModel.findOne({ telegramId: ctx.callbackQuery.from.id });
			await ctx.telegram.sendMessage(
				chosenUser.telegramId,
				`
üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üéâ
–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–µ–ª–∞ –≤ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º —Å—É–¥–µ –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.

–ó–∞–∫–∞–∑—á–∏–∫: üëî <b>${typeof currentCustomer.firstName === "string" ? currentCustomer.firstName : ""} ${
					typeof currentCustomer.lastName === "string" ? currentCustomer.lastName : ""
				}</b>.
${
	currentCustomer.username === undefined
		? `–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç –ó–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏.`
		: `–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É: üí¨ @${currentCustomer.username}`
}
`,
				{ parse_mode: "HTML" }
			);
			await ctx.reply(
				`
üí°
–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <b>${typeof chosenUser.firstName === "string" ? chosenUser.firstName : ""} ${
					typeof chosenUser.lastName === "string" ? chosenUser.lastName : ""
				}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
${
	currentCustomer.username === undefined
		? `–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –í–∞–º –ª—É—á—à–µ –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å –ø–µ—Ä–≤—ã–º –ø–æ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É: <a href="tg://user?id=${chosenUser.telegramId}">@${chosenUser.firstName}</a>`
		: `–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è - –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É/–µ–π –ª–∏—á–Ω–æ: <a href="tg://user?id=${chosenUser.telegramId}">@${chosenUser.firstName}</a>`
}
`,
				{ parse_mode: "HTML" }
			);
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	});

	find–°ontractor.action("more_contractors", async (ctx) => {
		ctx.answerCbQuery();
		ctx.scene.state.contractorsPage++;
		try {
			const chosenCourt = await courtModel.findOne({ _id: dbid });
			const dbRequestResults = await userModel.aggregate([
				{
					$match: {
						region: chosenCourt.COURTNUMBER,
						contractorStatus: true,
						$and: [
							{ telegramId: { $ne: ctx.update.callback_query.message.chat.id } },
							{ telegramId: { $ne: process.env.ADMIN_ID } },
						],
					},
				},
				{ $sort: { "rating.totalRating": -1 } },
				{ $skip: (ctx.scene.state.contractorsPage - 1) * 3 },
			]);
			const moreContractorsButton = () => {
				if (dbRequestResults.length > 0) {
					return {
						reply_markup: {
							inline_keyboard: [[{ text: "‚¨áÔ∏è –ï—â–µ ‚¨áÔ∏è", callback_data: "more_contractors" }]],
						},
						parse_mode: "HTML",
					};
				}
			};
			async function orderedMessages(array) {
				const newArray = array.splice(0, (ctx.scene.state.contractorsPage - 1) * 3);
				for (const element of newArray) {
					await userList(element, ctx);
				}
				ctx.reply(
					`
–ü–æ–∫–∞–∑–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å ${(ctx.scene.state.contractorsPage - 1) * 3 + 1} –ø–æ ${
						(ctx.scene.state.contractorsPage - 1) * 3 + 3 >= foundedCounter[0].telegramId
							? foundedCounter[0].telegramId
							: (ctx.scene.state.contractorsPage - 1) * 3 + 3
					} –∏–∑ ${foundedCounter[0].telegramId}, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ.
`,
					moreContractorsButton()
				);
			}
			orderedMessages(dbRequestResults);
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	});

	find–°ontractor.on("message", (ctx) => ctx.reply(messages.messageTypeWarningMessage));
	return find–°ontractor;
};
