const messages = require("../messages");
const { whatMarkup, customerRegDate } = require("../components/scene-functions");
const userModel = require("../models/User");
const logger = require("../logger");

// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞

exports.editCustomerStatusHandler = async function (ctx) {
	const msg = ctx.message.text;
	if (msg === "–î–ê") {
		try {
			await userModel.updateOne(
				{ telegramId: ctx.message.from.id },
				{ $set: { customerStatus: true, customerRegisterDate: await customerRegDate(ctx) } }
			);
			if (ctx.scene.state.action == "register") {
				await ctx.reply(
					"üí° –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
					await whatMarkup(ctx.message.from.id)
				);
				ctx.scene.enter("main");
			} else {
				ctx.reply(
					"üí° –¢–µ–ø–µ—Ä—å –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
					await whatMarkup(ctx.message.from.id)
				);
				ctx.scene.enter("profile");
			}
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	} else if (msg === "–ù–ï–¢") {
		try {
			await userModel.updateOne(
				{ telegramId: ctx.message.from.id },
				{ $set: { customerStatus: false, customerRegisterDate: undefined } }
			);
			ctx.reply(
				"üí° –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫. –¢–µ–ø–µ—Ä—å –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–µ–ª–∞–º–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
				await whatMarkup(ctx.message.from.id)
			);
			if (ctx.scene.state.action == "register") {
				ctx.scene.enter("main");
			} else {
				ctx.scene.enter("profile");
			}
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	} else {
		ctx.reply(messages.defaultErrorMessage);
		ctx.scene.reenter();
	}
};
