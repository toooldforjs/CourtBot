const Scene = require("telegraf/scenes/base");
const messages = require("../messages");
const { correctQuery, whatMarkup, getID, searchCourt, courtList, userList } = require("../components/scene-functions");
const db = require("../db");
const userModel = require("../models/User");
const courtModel = require("../models/Court");

// —Å—Ü–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –±–æ—Ç–∞

exports.GenFind–°ontractorScene = function () {
	const find–°ontractor = new Scene("find–°ontractor");
	find–°ontractor.enter(async (ctx) => {
		ctx.scene.state.sceneName = "find–°ontractor";
		let mainID = getID(ctx.message, ctx.callbackQuery);
		ctx.reply(
			`
üí°
–≠—Ç–æ –ø–æ–∏—Å–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å—É–¥–µ–±–Ω—ã–º –¥–µ–ª–æ–º.
–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ —Å—É–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—É–¥—ã.
–ö–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Å—É–¥–æ–º —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –≥–æ—Ç–æ–≤–æ–≥–æ —Ç—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å.`,
			await whatMarkup(mainID)
		);
	});
	find–°ontractor.on("text", async (ctx) => {
		let msg = correctQuery(ctx.message.text);
		switch (msg) {
			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				ctx.scene.enter("main");
				break;
			case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
				if (await db.isRegistered(ctx.message.from.id)) {
					ctx.reply(messages.alreadyRegistered);
				} else {
					ctx.scene.state.action = "register";
					ctx.scene.enter("editName", ctx.scene.state);
				}
				break;
			case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
				const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
				if (isUserRegistered) {
					if (isUserRegistered.contractorStatus) {
						ctx.scene.enter("find–°ontractor");
					} else {
						ctx.reply(
							"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
						);
					}
				} else {
					ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
				}
				break;
			case "–ü–æ–º–æ—â—å":
			case "/help":
				ctx.reply(messages.helpMessage);
				break;
			case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
				ctx.scene.enter("profile");
				break;
			case "/start":
				ctx.scene.reenter();
				break;
			case "/admin":
				ctx.scene.enter("adminScene");
				break;
			default:
				try {
					if (await db.isRegistered(ctx.message.from.id)) {
						let courts = await searchCourt(ctx.message.from.id, msg);
						if (courts.length > 0) {
							await ctx.reply(
								"üîé –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. üîç"
							);

							courts.forEach((element) => {
								return courtList(element, ctx);
							});
						} else {
							ctx.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
						}
					} else {
						await ctx.reply("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞–≥—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.");
						ctx.scene.enter("main");
					}
				} catch (error) {
					console.error(error);
					await ctx.reply(messages.defaultErrorMessage);
					ctx.scene.reenter();
				}
		}
	});
	find–°ontractor.action(/^dbid_.+/, async (ctx) => {
		ctx.answerCbQuery();
		let dbid = ctx.callbackQuery.data.slice(5);
		try {
			const chosenCourt = await courtModel.findOne({ _id: dbid });
			const foundedUsers = await userModel.aggregate([
				{ $match: { region: chosenCourt.COURTNUMBER } },
				{ $sample: { size: 3 } },
			]);
			await ctx.reply(`
üîé –í–æ—Ç –∫—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ. üîç
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞.
`);
			foundedUsers.forEach((element) => {
				return userList(element, ctx);
			});
		} catch (error) {
			console.error(error);
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	});
	find–°ontractor.action(/^user_.+/, async (ctx) => {
		ctx.answerCbQuery();
		let DbUserId = ctx.callbackQuery.data.slice(5);
		try {
			const chosenUser = await userModel.findOne({ _id: DbUserId });
			await ctx.telegram.sendMessage(
				chosenUser.telegramId,
				`
üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${chosenUser.firstName}</b>! üéâ
–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–µ–ª–∞ –≤ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º —Å—É–¥–µ –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.

–ó–∞–∫–∞–∑—á–∏–∫: üëî <b>${ctx.callbackQuery.from.first_name} ${ctx.callbackQuery.from.last_name}</b>.
–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É: üí¨ @${ctx.callbackQuery.from.username}.
            `,
				{ parse_mode: "HTML" }
			);
			await ctx.reply(
				`
üí°
–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <b>${chosenUser.firstName} ${chosenUser.lastName}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è - –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –ª–∏—á–Ω–æ: @${chosenUser.username}
`,
				{ parse_mode: "HTML" }
			);
		} catch (error) {
			console.error(error);
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	});
	find–°ontractor.on("message", (ctx) => ctx.reply(messages.messageTypeWarningMessage));
	return find–°ontractor;
};
