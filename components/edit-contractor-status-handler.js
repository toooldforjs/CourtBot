const messages = require("../messages");
const { whatMarkup, contractorRegDate } = require("../components/scene-functions");
const userModel = require("../models/User");
const logger = require("../logger");

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

exports.editContractorStatusHandler = async function (ctx) {
	const msg = ctx.message.text;
	if (msg === "–î–ê") {
		try {
			await userModel.updateOne(
				{ telegramId: ctx.message.from.id },
				{ $set: { contractorStatus: true, contractorRegisterDate: await contractorRegDate(ctx) } }
			);
			if (ctx.scene.state.action == "register") {
				await ctx.reply(
					"üí° –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è! –ñ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.",
					await whatMarkup(ctx.message.from.id)
				);
				ctx.scene.enter("editCustomerStatus", ctx.scene.state);
			} else {
				ctx.reply(
					"üí° C—Ç–∞—Ç—É—Å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.",
					await whatMarkup(ctx.message.from.id)
				);
				ctx.scene.enter("profile");
			}
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	} else if (msg === "–ù–ï–¢") {
		try {
			await userModel.updateOne(
				{ telegramId: ctx.message.from.id },
				{ $set: { contractorStatus: false, contractorRegisterDate: undefined } }
			);
			if (ctx.scene.state.action == "register") {
				ctx.reply(
					"üí° –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
					// await whatMarkup(ctx.message.from.id)
				);
				ctx.scene.enter("editCustomerStatus", ctx.scene.state);
			} else {
				ctx.reply(
					"üí° –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
					await whatMarkup(ctx.message.from.id)
				);
				ctx.scene.enter("profile");
			}
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	} else {
		ctx.reply(messages.defaultErrorMessage);
		ctx.scene.reenter();
	}
};
