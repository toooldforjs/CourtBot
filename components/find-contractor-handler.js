const messages = require("../messages");
const { correctQuery, searchCourt, courtList } = require("../components/scene-functions");
const { isRegistered } = require("../components/scene-functions");
const logger = require("../logger");

// —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É–¥–æ–≤/—Ä–µ–≥–∏–æ–Ω–æ–≤

exports.findContractorHandler = async function (ctx) {
	let msg = correctQuery(ctx.message.text);
	try {
		if (await isRegistered(ctx.message.from.id)) {
			let courts = await searchCourt(ctx.message.from.id, msg);
			if (courts.length > 0) {
				await ctx.reply(
					"üîé –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. üîç"
				);

				courts.forEach((element) => {
					return courtList(element, ctx);
				});
			} else {
				ctx.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
			}
		} else {
			await ctx.reply("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞–≥—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.");
			ctx.scene.enter("main");
		}
	} catch (error) {
		logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
		await ctx.reply(messages.defaultErrorMessage);
		ctx.scene.reenter();
	}
};
