const Scene = require("telegraf/scenes/base");
const messages = require("./messages");
const {
	newUserMenuMarkup,
	registeredUserMenuMarkup,
	userStatusButtons,
	userProfileButtons,
	confirmEditButtons,
	adminButtons,
	confirmDeleteButtons,
} = require("./components/keyboards");
const {
	correctQuery,
	whatMarkup,
	getID,
	searchCourt,
	datesFunction,
	courtList,
	userList,
} = require("./components/scene-functions");
const db = require("./db");
const userModel = require("./models/User");
const courtModel = require("./models/Court");
const replyMessages = require("./message-handlers/edit-name");
require("dotenv").config();

// –Ω–∞–±–æ—Ä—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω –∏ —Å–∏—Ç—É–∞—Ü–∏–π

// const newUserMenuMarkup = {
// 	reply_markup: {
// 		keyboard: [[{ text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" }, { text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }], [{ text: "–ü–æ–º–æ—â—å" }]],
// 		resize_keyboard: true,
// 	},
// 	parse_mode: "HTML",
// 	disable_web_page_preview: true,
// };
// const registeredUserMenuMarkup = {
// 	reply_markup: {
// 		keyboard: [
// 			[{ text: "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" }, { text: "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" }],
// 			[{ text: "–ü–æ–º–æ—â—å" }, { text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }],
// 			[{ text: "/admin" }, { text: "–ú–æ—Å–∫–≤–∞" }],
// 		],
// 		resize_keyboard: true,
// 	},
// 	parse_mode: "HTML",
// 	disable_web_page_preview: true,
// };

// const userStatusButtons = {
// 	reply_markup: {
// 		keyboard: [[{ text: "–î–ê" }, { text: "–ù–ï–¢" }]],
// 		resize_keyboard: true,
// 	},
// 	parse_mode: "HTML",
// };

// const userProfileButtons = {
// 	reply_markup: {
// 		inline_keyboard: [
// 			[{ text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "editProfile" }],
// 			[{ text: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "deleteProfile" }],
// 		],
// 	},
// 	parse_mode: "HTML",
// };

// const confirmEditButtons = {
// 	reply_markup: {
// 		inline_keyboard: [
// 			[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data: "editProfileName" }],
// 			[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é", callback_data: "editProfileLastname" }],
// 			[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–¥/—Ä–µ–≥–∏–æ–Ω", callback_data: "editProfileRegion" }],
// 			[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data: "editProfileContractor" }],
// 			[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ó–∞–∫–∞–∑—á–∏–∫–∞", callback_data: "editProfileCustomer" }],
// 		],
// 	},
// 	parse_mode: "HTML",
// };

// const adminButtons = {
// 	reply_markup: {
// 		inline_keyboard: [[{ text: "Stats", callback_data: "callStats" }]],
// 	},
// };

// const confirmDeleteButtons = {
// 	reply_markup: {
// 		keyboard: [[{ text: "–£–î–ê–õ–ò–¢–¨" }, { text: "–í–ï–†–ù–£–¢–¨–°–Ø" }]],
// 		resize_keyboard: true,
// 	},
// 	parse_mode: "HTML",
// 	one_time_keyboard: true,
// };

// // —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∑–∞–ø—Ä–æ—Å–∞

// function correctQuery(query) {
// 	const badWords = [
// 		"–ê–°",
// 		"–æ–±–ª–∞—Å—Ç—å",
// 		"–æ–±–ª–∞—Å—Ç–∏",
// 		"–ø–µ—Ä.",
// 		"–ø—Ä–æ—Å–ø.",
// 		"–ø—Ä–æ—Å–ø–µ–∫—Ç",
// 		"–≥.",
// 		"–¥.",
// 		"—É–ª.",
// 		"–∫–æ—Ä–ø.",
// 		"—Å—Ç—Ä.",
// 		"–∫—Ä–∞–π",
// 		"–∫—Ä–∞—è",
// 	];
// 	let arr = query
// 		.split(" ")
// 		.filter(function (item) {
// 			let a = badWords.includes(item);
// 			return !a;
// 		})
// 		.join(" ");
// 	return arr;
// }

// // —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// async function whatMarkup(tgID) {
// 	if (await db.isRegistered(tgID)) {
// 		return registeredUserMenuMarkup;
// 	} else {
// 		return newUserMenuMarkup;
// 	}
// }

// // —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∑—è—Ç–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫-–¥–∞—Ç—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –∏–∑ —á–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤–≤ —Å—Ü–µ–Ω—É

// function getID(message, callback_data) {
// 	if (message) {
// 		return message.from.id;
// 	} else {
// 		return callback_data.from.id;
// 	}
// }

// // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ —Å—É–¥–∞/—Ä–µ–≥–∏–æ–Ω–∞

// async function searchCourt(tgID, request) {
// 	try {
// 		const userProfile = await userModel.findOne({ telegramId: tgID });
// 		if (userProfile) {
// 			const dbResults = await courtModel.find({ $text: { $search: request } });
// 			if (dbResults) {
// 				return dbResults;
// 			} else {
// 				console.log("Court not found!");
// 			}
// 		} else {
// 			console.log("User not registered!");
// 		}
// 	} catch (error) {
// 		console.log("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ");
// 		console.log(error);
// 	}
// }

// // —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ undefined

// function datesFunction(userProfile) {
// 	let dates = {};
// 	if (userProfile.contractorRegisterDate === null) {
// 		dates.contractorRD = undefined;
// 	} else {
// 		dates.contractorRD = moment(userProfile.contractorRegisterDate).format("DD.MM.YYYY | HH:mm:ss");
// 	}
// 	if (userProfile.customerRegisterDate === null) {
// 		dates.customerRD = undefined;
// 	} else {
// 		dates.customerRD = moment(userProfile.customerRegisterDate).format("DD.MM.YYYY | HH:mm:ss");
// 	}
// 	return dates;
// }

// // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—É–¥–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

// function courtList(item, ctx) {
// 	const chooseRegionButtons = {
// 		reply_markup: {
// 			inline_keyboard: [[{ text: item.COURTNAME, callback_data: `dbid_${item._id}` }]],
// 		},
// 		parse_mode: "HTML",
// 	};
// 	ctx.reply(
// 		`
// üèõÔ∏è <b>${item.COURTNAME}</b>
// –ù–æ–º–µ—Ä —Å—É–¥–∞: ${item.COURTNUMBER}
// –ê–¥—Ä–µ—Å: ${item.COURTADDRESS}

// 	`,
// 		chooseRegionButtons
// 	);
// }
// // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω—É

// function userList(item, ctx) {
// 	const chooseUserButtons = {
// 		reply_markup: {
// 			inline_keyboard: [[{ text: `–ù–∞–ø–∏—Å–∞—Ç—å ‚òùÔ∏è ${item.firstName}`, callback_data: `user_${item._id}` }]],
// 		},
// 		parse_mode: "HTML",
// 	};
// 	ctx.reply(
// 		`
// üìå <b>${item.firstName} ${item.lastName}</b>
// –Ø–≤–ª—è–µ—Ç—Å—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —Å: <b>${moment(item.contractorRegisterDate).format("DD.MM.YYYY")}</b>
// `,
// 		chooseUserButtons
// 	);
// }

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω

class SceneGenerator {
	GenMainScene() {
		const main = new Scene("main");
		main.enter(async (ctx) => {
			let mainID = getID(ctx.message, ctx.callbackQuery);
			ctx.reply(
				`
–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?

‚¨áÔ∏è –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É. ‚¨áÔ∏è

–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤–∏–¥–Ω—ã - –Ω–∞–∂–º–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —á—Ç–æ–±—ã –∏—Ö –ø–æ–∫–∞–∑–∞—Ç—å.
			`,
				await whatMarkup(mainID)
			);
		});
		main.on("message", async (ctx) => {
			let msg = ctx.message.text;
			switch (msg) {
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					if (await db.isRegistered(ctx.message.from.id)) {
						ctx.reply(messages.alreadyRegistered);
						ctx.scene.reenter();
					} else {
						ctx.scene.state.action = "register";
						ctx.scene.enter("editName", ctx.scene.state);
					}
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
					ctx.reply("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É.");
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "/start":
					ctx.scene.reenter();
					break;
				case "/admin":
					ctx.scene.enter("adminScene");
					break;

				default:
					ctx.reply(`
					–ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö, –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ (/help).
					`);
					break;
			}
		});
		return main;
	}

	// 	GenProfileScene() {
	// 		const profile = new Scene("profile");
	// 		profile.enter(async (ctx) => {
	// 			let mainID = getID(ctx.message, ctx.callbackQuery);
	// 			try {
	// 				const userProfile = await userModel.findOne({ telegramId: mainID });
	// 				if (userProfile) {
	// 					let courtProfile = await courtModel.findOne({ COURTNUMBER: userProfile.region });
	// 					let dates = datesFunction(userProfile);
	// 					await ctx.reply(
	// 						`
	// ‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚≠ê

	// 					`,
	// 						registeredUserMenuMarkup
	// 					);
	// 					await ctx.reply(
	// 						`
	// <b>–ò–º—è:</b> ${userProfile.firstName == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : userProfile.firstName}
	// <b>–§–∞–º–∏–ª–∏—è:</b> ${userProfile.lastName == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞" : userProfile.lastName}
	// <b>–ù–æ–º–µ—Ä —Å—É–¥–∞:</b> ${userProfile.region == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" : userProfile.region}
	// <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞:</b> ${courtProfile == null || undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : courtProfile.COURTNAME}

	// <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${
	// 							userProfile.contractorStatus == undefined
	// 								? "‚ùå –ù–ï–¢"
	// 								: userProfile.contractorStatus == false
	// 								? "‚ùå –ù–ï–¢"
	// 								: "‚úÖ –î–ê"
	// 						}${
	// 							dates.contractorRD == undefined
	// 								? ""
	// 								: `\n\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> ‚è∞ ${dates.contractorRD}`
	// 						}

	// <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫:</b> ${
	// 							userProfile.customerStatus == undefined
	// 								? "‚ùå –ù–ï–¢"
	// 								: userProfile.customerStatus == false
	// 								? "‚ùå –ù–ï–¢"
	// 								: "‚úÖ –î–ê"
	// 						}${dates.customerRD == undefined ? "" : `\n\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> ‚è∞ ${dates.customerRD}`}
	// `,
	// 						userProfileButtons
	// 					);
	// 				} else {
	// 					ctx.reply(
	// 						"–ü–æ—Ö–æ–∂–µ –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –í—ã –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å."
	// 					);
	// 					ctx.scene.enter("main");
	// 				}
	// 			} catch (error) {
	// 				console.log(error);
	// 				await ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ");
	// 				ctx.scene.enter("main");
	// 			}
	// 		});
	// 		profile.action("deleteProfile", (ctx) => {
	// 			ctx.answerCbQuery();
	// 			ctx.scene.enter("deleteProfile");
	// 		});
	// 		profile.action("editProfile", (ctx) => {
	// 			ctx.answerCbQuery();
	// 			ctx.scene.enter("editProfile");
	// 		});
	// 		profile.on("text", async (ctx) => {
	// 			const msg = ctx.message.text;
	// 			switch (msg) {
	// 				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
	// 					ctx.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
	// 					break;
	// 				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
	// 					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
	// 					if (isUserRegistered) {
	// 						if (isUserRegistered.customerStatus) {
	// 							ctx.scene.enter("find–°ontractor");
	// 						} else {
	// 							ctx.reply(
	// 								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä."
	// 							);
	// 						}
	// 					} else {
	// 						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
	// 					}
	// 					break;
	// 				case "–ü–æ–º–æ—â—å":
	// 				case "/help":
	// 					ctx.reply(messages.helpMessage);
	// 					break;
	// 				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
	// 				case "/start":
	// 					ctx.scene.enter("main");
	// 					break;
	// 				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
	// 					ctx.scene.reenter();
	// 					break;
	// 				default:
	// 					ctx.reply("–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏. –ù–µ –ø–∏—à–∏—Ç–µ –Ω–∏—á–µ–≥–æ, –ø–æ–∫–∞ —è –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—à—É.");
	// 					break;
	// 			}
	// 		});
	// 		profile.on("message", (ctx) =>
	// 			ctx.reply(
	// 				"–ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å. –í –ø—Ä–æ—Ñ–∏–ª–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ–±–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –•–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É."
	// 			)
	// 		);
	// 		return profile;
	// 	}

	GenEditNameScene() {
		const editName = new Scene("editName");
		editName.enter(async (ctx) => {
			let replyMsg = replyMessages.editUserName(ctx.scene.state);
			if (ctx.scene.state.action == "register") {
				ctx.reply(replyMsg.sceneEnterMessage, newUserMenuMarkup);
			} else {
				ctx.reply(replyMsg.sceneEnterMessage, registeredUserMenuMarkup);
			}
		});
		editName.on("text", async (ctx) => {
			const msg = ctx.message.text;
			switch (msg) {
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					ctx.reply(replyMsg.registerationUserMessage);
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(replyMsg.notRegisteredContractorMessage);
						}
					} else {
						ctx.reply(replyMsg.notRegisteredUserMessage);
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				default:
					if (ctx.scene.state.action == "register") {
						if (await db.isRegistered(ctx.message.from.id)) {
							await ctx.reply("‚ùó –ü–æ—Ö–æ–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.‚ùó");
							ctx.scene.state.action = "edit";
							ctx.scene.enter("main", ctx.scene.state);
						} else {
							let userParams = {
								telegramId: ctx.message.from.id,
								username: ctx.message.from.username,
								firstName: msg,
								registrationDate: Date.now(),
							};
							try {
								db.saveUser(userParams);
								ctx.scene.enter("editLastname", ctx.scene.state);
							} catch (error) {
								ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
								ctx.scene.reenter();
							}
						}
					} else {
						try {
							await userModel.updateOne({ telegramId: ctx.message.from.id }, { $set: { firstName: msg } });
							ctx.reply(`–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤–æ–µ –∏–º—è: ${msg}`);
							ctx.scene.enter("main");
						} catch (error) {
							ctx.reply("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
							ctx.scene.reenter();
						}
					}

					break;
			}
		});
		editName.on("message", (ctx) => ctx.reply("–ù–µ—Ç. –ò–º—è. –¢–µ–∫—Å—Ç–æ–º. –í—Å–µ –ø—Ä–æ—Å—Ç–æ."));
		return editName;
	}

	GenEditLastnameScene() {
		const editLastname = new Scene("editLastname");
		editLastname.enter(async (ctx) => {
			let replyMsg;
			replyMsg = replyMessages.editUserLastname(ctx.scene.state);
			if (ctx.scene.state.action == "register") {
				ctx.reply(replyMsg.sceneEnterMessage, newUserMenuMarkup);
			} else {
				ctx.reply(replyMsg.sceneEnterMessage, registeredUserMenuMarkup);
			}
		});
		editLastname.on("text", async (ctx) => {
			const msg = ctx.message.text;
			switch (msg) {
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					ctx.reply(replyMsg.registerationUserMessage);
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(replyMsg.notRegisteredContractorMessage);
						}
					} else {
						ctx.reply(replyMsg.notRegisteredUserMessage);
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				default:
					console.log(ctx.scene.state.action);
					if (ctx.scene.state.action == "register") {
						try {
							await userModel.updateOne({ telegramId: ctx.message.from.id }, { $set: { lastName: msg } });
							ctx.scene.enter("editRegion", ctx.scene.state);
						} catch (error) {
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
							ctx.scene.reenter();
						}
					} else {
						try {
							await userModel.updateOne({ telegramId: ctx.message.from.id }, { $set: { lastName: msg } });
							ctx.scene.enter("main");
						} catch (error) {
							ctx.reply("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
							ctx.scene.reenter();
						}
						ctx.reply(`–§–∞–º–∏–ª–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è: ${msg}`);
					}
					break;
			}
		});
		editLastname.on("message", (ctx) =>
			ctx.reply(`
–ï—Å–ª–∏ —ç—Ç–æ –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è, —Ç–æ —è –±—ã —Å–æ–≤–µ—Ç–æ–≤–∞–ª –µ–µ —Å–º–µ–Ω–∏—Ç—å.
–ê –µ—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —Ñ–∞–º–∏–ª–∏—é. –ë—É–∫–≤–∞–º–∏.
		`)
		);
		return editLastname;
	}
	GenEditRegionScene() {
		const editRegion = new Scene("editRegion");
		editRegion.enter(async (ctx) => {
			let replyMsg;
			replyMsg = replyMessages.editUserRegion(ctx.scene.state);
			if (ctx.scene.state.action == "register") {
				ctx.reply(replyMsg.sceneEnterMessage, newUserMenuMarkup);
			} else {
				ctx.reply(replyMsg.sceneEnterMessage, registeredUserMenuMarkup);
			}
		});
		editRegion.on("text", async (ctx) => {
			const msg = ctx.message.text;
			switch (msg) {
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					ctx.reply(replyMsg.registerationUserMessage);
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(replyMsg.notRegisteredContractorMessage);
						}
					} else {
						ctx.reply(replyMsg.notRegisteredUserMessage);
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				default:
					try {
						let courts = await searchCourt(ctx.message.from.id, ctx.message.text);
						if (courts.length > 0) {
							await ctx.reply(
								"–í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
							);
							courts.forEach((element) => {
								return courtList(element, ctx);
							});
						} else {
							ctx.reply("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.");
						}
					} catch (error) {
						console.log(error);
						ctx.reply("–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –ø–æ–∏—Å–∫–∞ —Å—É–¥–∞.");
					}
					break;
			}
		});
		editRegion.action(/^dbid_.+/, async (ctx) => {
			let dbid = ctx.callbackQuery.data.slice(5);
			try {
				ctx.answerCbQuery();
				const chosenCourt = await courtModel.findOne({ _id: dbid });
				await userModel.updateOne(
					{ telegramId: ctx.callbackQuery.from.id },
					{ $set: { region: chosenCourt.COURTNUMBER } }
				);
				ctx.reply("–†–µ–≥–∏–æ–Ω –∏ —Å—É–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
				if (ctx.scene.state.action == "edit") {
					ctx.scene.enter("profile");
				} else {
					ctx.scene.enter("editContractorStatus", ctx.scene.state);
				}
			} catch (error) {
				console.log(error);
				ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
				ctx.scene.reenter();
			}
		});
		editRegion.on("message", (ctx) =>
			ctx.reply(
				`
<b>–í–≤–µ–¥–∏—Ç–µ <u>—Ä–µ–≥–∏–æ–Ω</u> –í–∞—à–µ–≥–æ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å—É–¥–∞.</b>
–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥, –∏–Ω–¥–µ–∫—Å, —É–ª–∏—Ü—É. –Ø –ø–æ–∏—â—É –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.
		`,
				{
					parse_mode: "HTML",
					disable_web_page_preview: true,
				}
			)
		);
		return editRegion;
	}

	GenEditContractorStatus() {
		const editContractorStatus = new Scene("editContractorStatus");
		editContractorStatus.enter(async (ctx) => {
			ctx.reply(
				`
<b>–£–∫–∞–∂–∏—Ç–µ, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –í—ã –≤—ã—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?</b>
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ–ª–∞–º–∏ –≤ —Å—É–¥–∞—Ö —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –ú–æ–∂–Ω–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫, –∏ –∫–∞–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.
`,
				userStatusButtons
			);
		});
		editContractorStatus.on("text", async (ctx) => {
			const msg = ctx.message.text;
			const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
			let checkContractorRegStatus = () => {
				let updateDate = undefined;
				if (isUserRegistered.contractorStatus == true) {
					// –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ == –î–ê
					updateDate = isUserRegistered.contractorRegisterDate; // –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
				} else {
					updateDate = Date.now(); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
				}
				return updateDate;
			};
			switch (msg) {
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					ctx.reply(
						"–ß–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –°–µ–π—á–∞—Å –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å."
					);
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –í–∞–º –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				case "–î–ê":
					if (ctx.scene.state.action == "register") {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { contractorStatus: true, contractorRegisterDate: checkContractorRegStatus() } }
							);
							await ctx
								.reply("–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è! –ñ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.")
								.then(ctx.scene.enter("editCustomerStatus", ctx.scene.state));
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.");
							ctx.scene.enter("editContractorStatus", ctx.scene.state);
						}
					} else {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { contractorStatus: true, contractorRegisterDate: checkContractorRegStatus() } }
							);
							ctx
								.reply("C—Ç–∞—Ç—É—Å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.")
								.then(ctx.scene.enter("profile"));
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.");
							ctx.scene.enter("editContractorStatus", ctx.scene.state);
						}
					}

					break;
				case "–ù–ï–¢":
					if (ctx.scene.state.action == "register") {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { contractorStatus: false, contractorRegisterDate: undefined } }
							);
							ctx
								.reply(
									"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ –í—ã –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É?"
								)
								.then(ctx.scene.enter("editCustomerStatus", ctx.scene.state));
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.");
							ctx.scene.enter("editContractorStatus", ctx.scene.state);
						}
					} else {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { contractorStatus: false, contractorRegisterDate: undefined } }
							);
							ctx.reply("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.");
							ctx.scene.enter("profile");
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.");
							ctx.scene.enter("editContractorStatus", ctx.scene.state);
						}
					}

					break;
				default:
					ctx.reply("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É. –î–ê –∏–ª–∏ –ù–ï–¢.");
					break;
			}
		});
		editContractorStatus.on("message", (ctx) =>
			ctx.reply(
				`
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É. –î–ê –∏–ª–∏ –ù–ï–¢.
		`
			)
		);
		return editContractorStatus;
	}

	GenEditCustomerStatus() {
		const editCustomerStatus = new Scene("editCustomerStatus");
		editCustomerStatus.enter(async (ctx) => {
			ctx.reply(
				`
<b>–£–∫–∞–∂–∏—Ç–µ, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –í—ã –≤—ã—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞?</b>
–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ–º–∞–ª–∏ –≤ —Å—É–¥–∞—Ö —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤. –ú–æ–∂–Ω–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫, –∏ –∫–∞–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.
`,
				userStatusButtons
			);
		});
		editCustomerStatus.on("text", async (ctx) => {
			const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
			let checkCustomerRegStatus = () => {
				let updateDate = undefined;
				if (isUserRegistered.customerStatus == true) {
					// –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ –±–∞–∑–µ == –î–ê
					updateDate = isUserRegistered.customerRegisterDate; // –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
				} else {
					updateDate = Date.now(); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
				}
				return updateDate;
			};
			const msg = ctx.message.text;
			switch (msg) {
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					ctx.reply(
						"–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ß–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –°–µ–π—á–∞—Å –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫."
					);
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				case "–î–ê":
					if (ctx.scene.state.action == "register") {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { customerStatus: true, customerRegisterDate: checkCustomerRegStatus() } }
							);
							await ctx
								.reply(
									"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫! –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."
								)
								.then(ctx.scene.enter("main"));
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ó–∞–∫–∞–∑—á–∏–∫–∞.");
							ctx.scene.enter("editCustomerStatus", ctx.scene.state);
						}
					} else {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { customerStatus: true, customerRegisterDate: checkCustomerRegStatus() } }
							);
							ctx.reply("–¢–µ–ø–µ—Ä—å –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.");
							ctx.scene.enter("profile");
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ó–∞–∫–∞–∑—á–∏–∫–∞.");
							ctx.scene.enter("editCustomerStatus", ctx.scene.state);
						}
					}

					break;
				case "–ù–ï–¢":
					if (ctx.scene.state.action == "register") {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { customerStatus: false, customerRegisterDate: undefined } }
							);
							ctx.reply("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫. –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.");
							ctx.scene.enter("main");
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ó–∞–∫–∞–∑—á–∏–∫–∞.");
							ctx.scene.enter("editCustomerStatus", ctx.scene.state);
						}
					} else {
						try {
							await userModel.updateOne(
								{ telegramId: ctx.message.from.id },
								{ $set: { customerStatus: false, customerRegisterDate: undefined } }
							);
							ctx.reply(
								"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ó–∞–∫–∞–∑—á–∏–∫–∞. –¢–µ–ø–µ—Ä—å –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–µ–ª–∞–º–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
							);
							ctx.scene.enter("profile");
						} catch (error) {
							console.log(error);
							ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ó–∞–∫–∞–∑—á–∏–∫–∞.");
							ctx.scene.enter("editCustomerStatus", ctx.scene.state);
						}
					}

					break;
				default:
					ctx.reply("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É. –î–ê –∏–ª–∏ –ù–ï–¢.");
					break;
			}
		});
		editCustomerStatus.on("message", (ctx) =>
			ctx.reply(
				`
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É. –î–ê –∏–ª–∏ –ù–ï–¢.
		`
			)
		);
		return editCustomerStatus;
	}

	GenFind–°ontractorScene() {
		const find–°ontractor = new Scene("find–°ontractor");
		find–°ontractor.enter(async (ctx) => {
			let mainID = getID(ctx.message, ctx.callbackQuery);
			ctx.reply(
				"–≠—Ç–æ –ø–æ–∏—Å–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å—É–¥–µ–±–Ω—ã–º –¥–µ–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ —Å—É–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Å—É–¥—ã, –≤ –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤—ã —Å—Ö–æ–¥–∏—Ç—å –º–µ—Å—Ç–Ω—ã–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏. –ê –ø–æ—Å–ª–µ —è –ø—Ä–µ–¥–ª–æ–∂—É —É–∂–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.",
				await whatMarkup(mainID)
			);
		});
		find–°ontractor.on("text", async (ctx) => {
			let msg = correctQuery(ctx.message.text);
			switch (msg) {
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
					ctx.scene.enter("main");
					break;
				case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
					if (await db.isRegistered(ctx.message.from.id)) {
						ctx.reply(messages.alreadyRegistered);
					} else {
						ctx.scene.state.action = "register";
						ctx.scene.enter("editName", ctx.scene.state);
					}
					break;
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
					ctx.reply("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É.");
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "/start":
					ctx.scene.reenter();
					break;
				case "/admin":
					ctx.scene.enter("adminScene");
					break;
				default:
					try {
						if (await db.isRegistered(ctx.message.from.id)) {
							let courts = await searchCourt(ctx.message.from.id, msg);
							if (courts.length > 0) {
								await ctx.reply(
									"üîé –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. üîç"
								);

								courts.forEach((element) => {
									return courtList(element, ctx);
								});
							} else {
								ctx.reply("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.");
							}
						} else {
							await ctx.reply("–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
							ctx.scene.enter("main");
						}
					} catch (error) {
						console.error(error);
						await ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞");
						ctx.scene.reenter();
					}
			}
		});
		find–°ontractor.action(/^dbid_.+/, async (ctx) => {
			ctx.answerCbQuery();
			let dbid = ctx.callbackQuery.data.slice(5);
			try {
				const chosenCourt = await courtModel.findOne({ _id: dbid });
				const foundedUsers = await userModel.aggregate([
					{ $match: { region: chosenCourt.COURTNUMBER } },
					{ $sample: { size: 3 } },
				]);
				await ctx.reply(`
üîé –í–æ—Ç –∫—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ. üîç
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞.
`);
				foundedUsers.forEach((element) => {
					return userList(element, ctx);
				});
			} catch (error) {
				console.error(error);
				ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
				ctx.scene.reenter();
			}
		});
		find–°ontractor.action(/^user_.+/, async (ctx) => {
			ctx.answerCbQuery();
			let DbUserId = ctx.callbackQuery.data.slice(5);
			try {
				const chosenUser = await userModel.findOne({ _id: DbUserId });
				await ctx.telegram.sendMessage(
					chosenUser.telegramId,
					`
üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${chosenUser.firstName}</b>! üéâ
–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–µ–ª–∞ –≤ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º —Å—É–¥–µ –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.

–ó–∞–∫–∞–∑—á–∏–∫: üëî <b>${ctx.callbackQuery.from.first_name} ${ctx.callbackQuery.from.last_name}</b>.
–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É: üí¨ @${ctx.callbackQuery.from.username}.
				`,
					{ parse_mode: "HTML" }
				);
				await ctx.reply(
					`
üí°
–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <b>${chosenUser.firstName} ${chosenUser.lastName}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è - –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –ª–∏—á–Ω–æ: @${chosenUser.username}
`,
					{ parse_mode: "HTML" }
				);
			} catch (error) {
				console.error(error);
				ctx.reply("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
				ctx.scene.reenter();
			}
		});
		find–°ontractor.on("message", (ctx) => ctx.reply("–ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."));
		return find–°ontractor;
	}

	GenFindCourtScene() {
		const findCourt = new Scene("findCourt");
		findCourt.enter((ctx) => {
			ctx.reply("–≠—Ç–æ –ø–æ–∏—Å–∫ —Å—É–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—É–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç–µ, –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ –Ω–µ–º.");
		});
		findCourt.on("text", async (ctx) => {
			switch (ctx.message.text) {
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
					ctx.scene.enter("main");
					break;
				default:
					const courtNum = ctx.message.text;
					try {
						const courtProfile = await courtModel.findOne({ COURTNUMBER: courtNum });
						ctx.reply(`
${courtProfile.COURTNUMBER}
${courtProfile.COURTNAME}
${courtProfile.COURTADDRESS}
`);
					} catch (error) {
						console.log(error);
						ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞");
						ctx.scene.reenter();
					}
			}
		});
		findCourt.on("message", (ctx) => ctx.reply("–≠—Ç–æ —è–≤–Ω–æ –Ω–µ –Ω–æ–º–µ—Ä —Å—É–¥–∞!"));
		return findCourt;
	}

	// —Å—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è

	GenEditProfileScene() {
		const editProfile = new Scene("editProfile");
		editProfile.enter(async (ctx) => {
			ctx.scene.state.action = "edit";
			ctx.reply(
				`
–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.
			`,
				confirmEditButtons
			);
		});
		editProfile.on("text", async (ctx) => {
			switch (ctx.message.text) {
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				default:
					ctx.reply("–ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.");
					break;
			}
		});
		editProfile.action("editProfileName", (ctx) => {
			ctx.answerCbQuery();
			ctx.scene.enter("editName", ctx.scene.state);
		});
		editProfile.action("editProfileLastname", (ctx) => {
			ctx.answerCbQuery();
			ctx.scene.enter("editLastname", ctx.scene.state);
		});
		editProfile.action("editProfileRegion", (ctx) => {
			ctx.answerCbQuery();
			ctx.scene.enter("editRegion", ctx.scene.state);
		});
		editProfile.action("editProfileContractor", (ctx) => {
			ctx.answerCbQuery();
			ctx.scene.enter("editContractorStatus", ctx.scene.state);
		});
		editProfile.action("editProfileCustomer", (ctx) => {
			ctx.answerCbQuery();
			ctx.scene.enter("editCustomerStatus", ctx.scene.state);
		});
		editProfile.on("message", (ctx) =>
			ctx.reply(
				`
–ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Å–µ–π—á–∞—Å –ø–∏—Å–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.
`
			)
		);
		return editProfile;
	}
	// —Å—Ü–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è

	GenDeleteProfileScene() {
		const deleteProfile = new Scene("deleteProfile");
		deleteProfile.enter(async (ctx) => {
			ctx.reply(
				`
üî• ‚ùó –í–ù–ò–ú–ê–ù–ò–ï ‚ùó üî•
–í—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –í–∞–º —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
			`,
				confirmDeleteButtons
			);
		});
		deleteProfile.on("text", async (ctx) => {
			const msg = ctx.message.text;
			switch (msg) {
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				case "–í–ï–†–ù–£–¢–¨–°–Ø":
					ctx.reply("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!");
					ctx.scene.enter("main");
					break;
				case "–£–î–ê–õ–ò–¢–¨":
					try {
						await userModel.deleteOne({ telegramId: ctx.message.from.id });
						ctx.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å.");
						ctx.scene.enter("main");
					} catch (error) {
						console.log(error);
						ctx.reply(`
üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. üî¥
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /help
`);
						ctx.scene.enter("main");
					}
					break;
				default:
					ctx.reply(
						`
–í—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –µ—Å—Ç—å 2 –∫–Ω–æ–ø–∫–∏. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä.
			`
					);
					break;
			}
		});
		deleteProfile.on("message", (ctx) =>
			ctx.reply(
				`
–í—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –µ—Å—Ç—å 2 –∫–Ω–æ–ø–∫–∏. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä.
	`
			)
		);
		return deleteProfile;
	}
	GenCheckCourtScene() {
		const checkCourt = new Scene("checkCourt");

		checkCourt.on("text", async (ctx) => {
			try {
				let courts = await searchCourt(ctx.message.from.id, ctx.message.text);
				if (courts.length > 0) {
					ctx.reply(
						"–í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å."
					);

					courts.forEach((element) => {
						return courtList(element);
					});
				} else {
					ctx.reply("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.");
				}
			} catch (error) {
				console.log(error);
				ctx.reply("–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –ø–æ–∏—Å–∫–∞ —Å—É–¥–∞.");
			}
		});
		checkCourt.action(/^dbid_.+/, (ctx) => {
			ctx.answerCbQuery();
			ctx.reply("works!");
		});
		return checkCourt;
	}

	// —Å—Ü–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞

	GenAdminScene() {
		const adminScene = new Scene("adminScene");
		adminScene.enter(async (ctx) => {
			let mainID = getID(ctx.message, ctx.callbackQuery);
			if (
				(await db.isRegistered(mainID)) &&
				(await userModel.findOne({ telegramId: mainID })).telegramId === Number.parseInt(process.env.ADMIN_ID)
			) {
				ctx.reply(
					`
–¶–µ–Ω—Ç—Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–æ–ª–µ—Ç–∞–º–∏
				`,
					adminButtons
				);
			} else {
				ctx.reply("–°–æ—Ä–∏, –¥—Ä—É–≥. –¢—ã –Ω–µ –∞–¥–º–∏–Ω");
				ctx.scene.enter("main");
			}
		});
		adminScene.on("text", async (ctx) => {
			const msg = ctx.message.text;
			switch (msg) {
				case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
					const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
					if (isUserRegistered) {
						if (isUserRegistered.contractorStatus) {
							ctx.scene.enter("find–°ontractor");
						} else {
							ctx.reply(
								"–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ó–∞–∫–∞–∑—á–∏–∫–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"
							);
						}
					} else {
						ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–∫–∞—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–≥–æ —è –∑–Ω–∞—é –ø–æ –∏–º–µ–Ω–∏.");
					}
					break;
				case "–ü–æ–º–æ—â—å":
				case "/help":
					ctx.reply(messages.helpMessage);
					break;
				case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
				case "/start":
					ctx.scene.enter("main");
					break;
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					ctx.scene.enter("profile");
					break;
				default:
					ctx.reply(
						`
–ö—Ö–º... –ö–Ω–æ–ø–∫–∏...
			`
					);
					break;
			}
		});
		adminScene.action("callStats", async (ctx) => {
			ctx.answerCbQuery();
			ctx.reply(`
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ üìà ${await userModel.countDocuments({})}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π üìà ${await userModel.countDocuments({
				registrationDate: { $gt: new Date(Date.now() - 1000 * 60 * 60 * 168) },
			})}
`);
		});
		return adminScene;
	}
}

module.exports = SceneGenerator;
