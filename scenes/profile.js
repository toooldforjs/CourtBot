const Scene = require("telegraf/scenes/base");
const { userProfileButtons } = require("../components/keyboards");
const { getID, datesFunction } = require("../components/scene-functions");
const { switcher } = require("../components/switcher");
const userModel = require("../models/User");
const courtModel = require("../models/Court");
const logger = require("../logger");

exports.GenProfileScene = function () {
	const profile = new Scene("profile");
	profile.enter(async (ctx) => {
		ctx.scene.state.sceneName = "profile";
		let mainID = getID(ctx.message, ctx.callbackQuery);
		try {
			const userProfile = await userModel.findOne({ telegramId: mainID });
			if (userProfile) {
				let courtProfile = await courtModel.findOne({ COURTNUMBER: userProfile.region });
				let dates = datesFunction(userProfile);
				if (userProfile.profilePic) {
					await ctx.telegram.sendPhoto(mainID, `${userProfile.profilePic}`, {
						caption: `
–ò–º—è: üî∏ ${userProfile.firstName == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : userProfile.firstName}
–§–∞–º–∏–ª–∏—è: üî∏ ${userProfile.lastName == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞" : userProfile.lastName}
–ù–æ–º–µ—Ä —Å—É–¥–∞: üî∏ ${userProfile.region == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" : userProfile.region}
–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞: üî∏ ${courtProfile == null || undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : courtProfile.COURTNAME}
–û–ø–∏—Å–∞–Ω–∏–µ: üî∏ ${userProfile.profileBio}

–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥: üî∏ ${userProfile.rating.totalRating}
–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥? /help

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å? ${
							userProfile.contractorStatus == undefined
								? "‚ùå –ù–ï–¢"
								: userProfile.contractorStatus == false
								? "‚ùå –ù–ï–¢"
								: "‚úÖ –î–ê"
						}${dates.contractorRD == undefined ? "" : `\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å ${dates.contractorRD}`}

–ó–∞–∫–∞–∑—á–∏–∫? ${
							userProfile.customerStatus == undefined
								? "‚ùå –ù–ï–¢"
								: userProfile.customerStatus == false
								? "‚ùå –ù–ï–¢"
								: "‚úÖ –î–ê"
						}${dates.customerRD == undefined ? "" : `\n–ó–∞–∫–∞–∑—á–∏–∫ —Å ${dates.customerRD}`}
`,
						reply_markup: userProfileButtons,
					});
				} else {
					await ctx.reply(
						`
–ò–º—è: üî∏ ${userProfile.firstName == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : userProfile.firstName}
–§–∞–º–∏–ª–∏—è: üî∏ ${userProfile.lastName == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞" : userProfile.lastName}
–ù–æ–º–µ—Ä —Å—É–¥–∞: üî∏ ${userProfile.region == undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" : userProfile.region}
–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞: üî∏ ${courtProfile == null || undefined ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : courtProfile.COURTNAME}
–û–ø–∏—Å–∞–Ω–∏–µ: üî∏ ${userProfile.profileBio}

–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥: üî∏ ${userProfile.rating.totalRating}
–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥? /help

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å? ${
							userProfile.contractorStatus == undefined
								? "‚ùå –ù–ï–¢"
								: userProfile.contractorStatus == false
								? "‚ùå –ù–ï–¢"
								: "‚úÖ –î–ê"
						}${dates.contractorRD == undefined ? "" : `\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å ${dates.contractorRD}`}

–ó–∞–∫–∞–∑—á–∏–∫? ${
							userProfile.customerStatus == undefined
								? "‚ùå –ù–ï–¢"
								: userProfile.customerStatus == false
								? "‚ùå –ù–ï–¢"
								: "‚úÖ –î–ê"
						}${dates.customerRD == undefined ? "" : `\n–ó–∞–∫–∞–∑—á–∏–∫ —Å ${dates.customerRD}`}
					`,
						{ reply_markup: userProfileButtons }
					);
				}
			} else {
				ctx.reply(
					"–ü–æ—Ö–æ–∂–µ –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –í—ã –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å."
				);
				ctx.scene.enter("main");
			}
		} catch (error) {
			logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
			await ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ");
			ctx.scene.enter("main");
		}
	});
	profile.action("deleteProfile", (ctx) => {
		ctx.answerCbQuery();
		ctx.scene.enter("deleteProfile");
	});
	profile.action("editProfile", (ctx) => {
		ctx.answerCbQuery();
		ctx.scene.enter("editProfile");
	});
	profile.on("text", async (ctx) => {
		switcher(ctx);
	});
	profile.on("message", async (ctx) => {
		ctx.reply("‚ö†Ô∏è –ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, –ø–æ–∫–∞ —è –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—à—É.");
	});
	return profile;
};
