const Scene = require("telegraf/scenes/base");
const messages = require("../messages");
const userModel = require("../models/User");
const { switcher } = require("../components/switcher");

// —Å—Ü–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

const switcherHandler = async function (ctx) {
	let msg = ctx.message.text;
	if (msg.length >= 197) {
		try {
			msg = `${msg.slice(0, 197)}` + `...`;
			await userModel.updateOne({ telegramId: ctx.message.from.id }, { $set: { lastName: msg } });
			ctx.reply(
				`
üí° –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üí°
<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>
${msg}
`,
				{
					parse_mode: "HTML",
				}
			);
		} catch (error) {
			console.log(error);
		}
	} else {
		try {
			await userModel.updateOne({ telegramId: ctx.message.from.id }, { $set: { profileBio: msg } });
			ctx.reply(
				`
üí° –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üí°
<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>
${msg}
`,
				{
					parse_mode: "HTML",
				}
			);
		} catch (error) {
			console.log(error);
		}
	}
};

exports.GenEditProfileBio = function () {
	const editProfileBio = new Scene("editProfileBio");
	editProfileBio.enter(async (ctx) => {
		ctx.scene.state.sceneName = "editProfileBio";
		ctx.reply(
			`
üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, —á–µ–º-—Ç–æ, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞.
–ù–µ –±–æ–ª–µ–µ 200 –∑–Ω–∞–∫–æ–≤. –ë—É–¥–µ—Ç –¥–ª–∏–Ω–Ω–µ–µ - —è —Å–∞–º —Å–æ–∫—Ä–∞—â—É.
üí∞ <b>–≠—Ç–æ –∑–∞–º–µ—Ç–Ω–æ –ø—Ä–∏–±–∞–≤–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –í–∞–º —Å –∑–∞–∫–∞–∑–∞–º–∏.</b> üí∞
        `,
			{
				parse_mode: "HTML",
			}
		);
	});
	editProfileBio.on("text", async (ctx) => {
		switcher(ctx, switcherHandler);
	});
	editProfileBio.on("message", (ctx) => {
		ctx.reply(messages.messageTypeWarningMessage);
	});
	return editProfileBio;
};
