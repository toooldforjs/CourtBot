const Scene = require("telegraf/scenes/base");
const messages = require("../messages");
const { newUserMenuMarkup, registeredUserMenuMarkup } = require("../components/keyboards");
const { searchCourt, courtList } = require("../components/scene-functions");
const userModel = require("../models/User");
const courtModel = require("../models/Court");
const replyMessages = require("../message-handlers/edit-region");

// —Å—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

exports.GenEditRegionScene = function () {
	const editRegion = new Scene("editRegion");
	editRegion.enter(async (ctx) => {
		ctx.scene.state.sceneName = "editRegion";
		let replyMsg = replyMessages.editUserRegion(ctx.scene.state);
		if (ctx.scene.state.action == "register") {
			ctx.reply(replyMsg.sceneEnterMessage, newUserMenuMarkup);
		} else {
			ctx.reply(replyMsg.sceneEnterMessage, registeredUserMenuMarkup);
		}
	});
	editRegion.on("text", async (ctx) => {
		const msg = ctx.message.text;
		switch (msg) {
			case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
				ctx.reply(replyMsg.registerationUserMessage);
				break;
			case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
				ctx.scene.enter("profile");
				break;
			case "–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
				const isUserRegistered = await userModel.findOne({ telegramId: ctx.message.from.id });
				if (isUserRegistered) {
					if (isUserRegistered.contractorStatus) {
						ctx.scene.enter("find–°ontractor");
					} else {
						ctx.reply(replyMsg.notRegisteredContractorMessage);
					}
				} else {
					ctx.reply(replyMsg.notRegisteredUserMessage);
				}
				break;
			case "–ü–æ–º–æ—â—å":
			case "/help":
				ctx.reply(messages.helpMessage);
				break;
			case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
			case "/start":
				ctx.scene.enter("main");
				break;
			default:
				try {
					let courts = await searchCourt(ctx.message.from.id, ctx.message.text);
					if (courts.length > 0) {
						await ctx.reply(
							`
üîé –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. üîé
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.`
						);
						courts.forEach((element) => {
							return courtList(element, ctx);
						});
					} else {
						ctx.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.");
					}
				} catch (error) {
					console.log(error);
					ctx.reply(messages.defaultErrorMessage);
				}
				break;
		}
	});
	editRegion.action(/^dbid_.+/, async (ctx) => {
		let dbid = ctx.callbackQuery.data.slice(5);
		try {
			ctx.answerCbQuery();
			const chosenCourt = await courtModel.findOne({ _id: dbid });
			await userModel.updateOne(
				{ telegramId: ctx.callbackQuery.from.id },
				{ $set: { region: chosenCourt.COURTNUMBER } }
			);
			ctx.reply("üí° –†–µ–≥–∏–æ–Ω –∏ —Å—É–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
			if (ctx.scene.state.action == "edit") {
				ctx.scene.enter("profile");
			} else {
				ctx.scene.enter("editContractorStatus", ctx.scene.state);
			}
		} catch (error) {
			console.log(error);
			ctx.reply(messages.defaultErrorMessage);
			ctx.scene.reenter();
		}
	});
	editRegion.on("message", (ctx) =>
		ctx.reply(
			`
üí° <b>–í–≤–µ–¥–∏—Ç–µ <u>—Ä–µ–≥–∏–æ–Ω</u> –í–∞—à–µ–≥–æ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å—É–¥–∞.</b> üí°
–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥, –∏–Ω–¥–µ–∫—Å, —É–ª–∏—Ü—É. –Ø –ø–æ–∏—â—É –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.
    `,
			{
				parse_mode: "HTML",
				disable_web_page_preview: true,
			}
		)
	);
	return editRegion;
};
