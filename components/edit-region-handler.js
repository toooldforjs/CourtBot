const messages = require("../messages");
const { searchCourt, courtList } = require("../components/scene-functions");
const logger = require("../logger");

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ª–∏–æ–Ω–∞/—Å—É–¥–∞

exports.editRegionHandler = async function (ctx) {
	try {
		let courts = await searchCourt(ctx.message.from.id, ctx.message.text);
		if (courts.length > 0) {
			await ctx.reply(
				`
üîé –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. üîé
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.`
			);
			courts.forEach((element) => {
				return courtList(element, ctx);
			});
		} else {
			ctx.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.");
		}
	} catch (error) {
		logger.error(error, { tgMessage: ctx.message, tgQuery: ctx.callbackQuery });
		ctx.reply(messages.defaultErrorMessage);
	}
};
