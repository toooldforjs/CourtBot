const moment = require("moment");
moment.locale("ru");
const { newUserMenuMarkup, registeredUserMenuMarkup } = require("../components/keyboards");
const db = require("../db");
const userModel = require("../models/User");
const courtModel = require("../models/Court");
require("dotenv").config();

// —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∑–∞–ø—Ä–æ—Å–∞

exports.correctQuery = function (query) {
	const badWords = [
		"–ê–°",
		"–æ–±–ª–∞—Å—Ç—å",
		"–æ–±–ª–∞—Å—Ç–∏",
		"–ø–µ—Ä.",
		"–ø—Ä–æ—Å–ø.",
		"–ø—Ä–æ—Å–ø–µ–∫—Ç",
		"–≥.",
		"–¥.",
		"—É–ª.",
		"–∫–æ—Ä–ø.",
		"—Å—Ç—Ä.",
		"–∫—Ä–∞–π",
		"–∫—Ä–∞—è",
	];
	let arr = query
		.split(" ")
		.filter(function (item) {
			let a = badWords.includes(item);
			return !a;
		})
		.join(" ");
	return arr;
};

// —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.whatMarkup = async function (tgID) {
	if (await db.isRegistered(tgID)) {
		return registeredUserMenuMarkup;
	} else {
		return newUserMenuMarkup;
	}
};

// —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∑—è—Ç–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫-–¥–∞—Ç—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –∏–∑ —á–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤–≤ —Å—Ü–µ–Ω—É

exports.getID = function (message, callback_data) {
	if (message) {
		return message.from.id;
	} else {
		return callback_data.from.id;
	}
};

// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ —Å—É–¥–∞/—Ä–µ–≥–∏–æ–Ω–∞

exports.searchCourt = async function (tgID, request) {
	try {
		const userProfile = await userModel.findOne({ telegramId: tgID });
		if (userProfile) {
			const dbResults = await courtModel.find({ $text: { $search: request } });
			if (dbResults) {
				return dbResults;
			} else {
				console.log("Court not found!");
			}
		} else {
			console.log("User not registered!");
		}
	} catch (error) {
		console.log("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ");
		console.log(error);
	}
};

// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ undefined

exports.datesFunction = function (userProfile) {
	let dates = {};
	if (userProfile.contractorRegisterDate === null) {
		dates.contractorRD = undefined;
	} else {
		dates.contractorRD = moment(userProfile.contractorRegisterDate).format("DD.MM.YYYY | HH:mm:ss");
	}
	if (userProfile.customerRegisterDate === null) {
		dates.customerRD = undefined;
	} else {
		dates.customerRD = moment(userProfile.customerRegisterDate).format("DD.MM.YYYY | HH:mm:ss");
	}
	return dates;
};

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—É–¥–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

exports.courtList = function (item, ctx) {
	const chooseRegionButtons = {
		reply_markup: {
			inline_keyboard: [[{ text: item.COURTNAME, callback_data: `dbid_${item._id}` }]],
		},
		parse_mode: "HTML",
	};
	ctx.reply(
		`
üèõÔ∏è <b>${item.COURTNAME}</b>
–ù–æ–º–µ—Ä —Å—É–¥–∞: ${item.COURTNUMBER}
–ê–¥—Ä–µ—Å: ${item.COURTADDRESS}
	
	`,
		chooseRegionButtons
	);
};
// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω—É

exports.userList = function (item, ctx) {
	const chooseUserButtons = {
		reply_markup: {
			inline_keyboard: [[{ text: `–ù–∞–ø–∏—Å–∞—Ç—å ‚òùÔ∏è ${item.firstName}`, callback_data: `user_${item._id}` }]],
		},
		parse_mode: "HTML",
	};
	ctx.reply(
		`
üìå <b>${item.firstName} ${item.lastName}</b>
–Ø–≤–ª—è–µ—Ç—Å—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —Å: <b>${moment(item.contractorRegisterDate).format("DD.MM.YYYY")}</b>
`,
		chooseUserButtons
	);
};
